{"version":3,"sources":["contexts/ThemeContext.js","components/Navbar.js","components/CountryItem.js","components/Home.js","components/CountryDetails.js","App.js","serviceWorker.js","index.js"],"names":["ThemeContext","createContext","children","useState","isLight","light","bg","elBack","txt","dark","theme","setTheme","Provider","value","toggle","useContext","mode","style","color","backgroundColor","className","onClick","country","src","flag","alt","name","textDecoration","to","alpha3Code","population","toLocaleString","region","capital","options","label","Home","state","countries","handleSearch","e","axios","get","target","then","res","setState","data","handleFilter","Consumer","themeContext","id","onChange","type","placeholder","map","key","Component","CountryDetails","goBack","link","props","history","goCountry","path","this","match","params","alpha","paddingTop","nativeName","subregion","topLevelDomain","currencies","length","currency","languages","language","borders","border","App","Navbar","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2a173d69.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\n\nexport const ThemeContext = createContext();\n\nexport default ({ children }) => {\n  // set the default style for every theme\n  let themeState = {\n    isLight: true,\n    light: {\n      bg: \"hsl(0, 0%, 98%)\",\n      elBack: \"hsl(0, 0%, 100%)\",\n      txt: \"hsl(200, 15%, 8%)\"\n    },\n    dark: {\n      bg: \"hsl(207, 26%, 17%)\",\n      elBack: \"hsl(209, 23%, 22%)\",\n      txt: \"hsl(0, 0%, 100%)\"\n    }\n  };\n\n  const [theme, setTheme] = useState(themeState);\n\n  // toggle theme by editing the \"isLight\" property\n  let toggleTheme = () => {\n    setTheme({ ...theme, isLight: !theme.isLight });\n  };\n\n  return (\n    <ThemeContext.Provider value={{ ...theme, toggle: toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { ThemeContext } from \"../contexts/ThemeContext\";\n\nexport default () => {\n  let { isLight, light, dark, toggle } = useContext(ThemeContext);\n  let mode = isLight ? light : dark;\n\n  let style = {\n    color: mode.txt,\n    backgroundColor: mode.elBack\n  };\n  return (\n    <nav className={`app-nav mode-${isLight ? \"light\" : \"dark\"}`} style={style}>\n      <div className=\"container\">\n        <h1> Where in the world? </h1>\n\n        <button\n          style={{ color: mode.txt }}\n          className={`nav-toggle hover-${isLight ? \"light\" : \"dark\"}`}\n          onClick={toggle}\n        >\n          <i className=\"fa fa-moon\"></i>\n          Dark Mode\n        </button>\n      </div>\n    </nav>\n  );\n};\n","import React, { useContext } from \"react\";\n\nimport { Link } from \"react-router-dom\";\n\nimport \"./CountryItem.css\";\nimport { ThemeContext } from \"../contexts/ThemeContext\";\n\nexport default ({ country }) => {\n  let { isLight, light, dark } = useContext(ThemeContext);\n  let mode = isLight ? light : dark;\n  return (\n    <article className=\"country-card\">\n      <section\n        className={`country-card-content mode-${isLight ? \"light\" : \"dark\"}`}\n        style={{ backgroundColor: mode.elBack, color: mode.txt }}\n      >\n        <section className=\"country-flag\">\n          <img src={country.flag} alt={`${country.name}'s flag`} />\n        </section>\n\n        <section className=\"country-info\">\n          <p className=\"country-name\">\n            <Link\n              style={{ color: mode.txt, textDecoration: \"none\" }}\n              to={`/${country.alpha3Code}`}\n            >\n              {\" \"}\n              {country.name}{\" \"}\n            </Link>\n          </p>\n\n          <ul className=\"country-data\">\n            <li className=\"country-data-item\">\n              <span className=\"data-key\" style={{ color: mode.txt }}>\n                Population:{\" \"}\n              </span>\n              {country.population.toLocaleString()}\n            </li>\n            <li className=\"country-data-item\">\n              <span className=\"data-key\" style={{ color: mode.txt }}>\n                Region:{\" \"}\n              </span>\n              {country.region}\n            </li>\n            <li className=\"country-data-item\">\n              <span className=\"data-key\" style={{ color: mode.txt }}>\n                Capital:{\" \"}\n              </span>\n              {country.capital}\n            </li>\n          </ul>\n        </section>\n      </section>\n    </article>\n  );\n};\n","// import React, { useContext, useEffect, useState } from \"react\";\nimport React, { Component } from \"react\";\nimport { ThemeContext } from \"../contexts/ThemeContext\";\n// modular styling\nimport \"./Home.css\";\n// \"React-select\" library\nimport Select from \"react-select\";\n// axios to perform http requests\nimport axios from \"axios\";\n\n// import country item component\nimport CountryItem from \"./CountryItem\";\n\n// add the select options\nlet options = [\n  { value: \"africa\", label: \"Africa\" },\n  { value: \"americas\", label: \"America\" },\n  { value: \"asia\", label: \"Asia\" },\n  { value: \"europe\", label: \"Europe\" },\n  { value: \"oceania\", label: \"Oceania\" }\n];\n\nexport default class Home extends Component {\n  state = {\n    countries: []\n  };\n\n  componentDidMount() {\n    axios.get(\"https://restcountries.eu/rest/v2/all\").then(res => {\n      this.setState({\n        countries: res.data\n      });\n    });\n  }\n\n  // search for countries\n  handleSearch = e => {\n    axios\n      .get(`https://restcountries.eu/rest/v2/name/${e.target.value}`)\n      .then(res => {\n        this.setState({\n          countries: res.data\n        });\n      });\n  };\n\n  // filter the data\n  handleFilter = e => {\n    axios\n      .get(`https://restcountries.eu/rest/v2/region/${e.value}`)\n      .then(res => {\n        this.setState({\n          countries: res.data\n        });\n      });\n  };\n\n  render() {\n    return (\n      <ThemeContext.Consumer>\n        {themeContext => {\n          let { isLight, light, dark } = themeContext;\n          let mode = isLight ? light : dark;\n\n          return (\n            <div style={{ backgroundColor: mode.bg }} id=\"Home\">\n              <section className=\"controls container\">\n                <section className=\"filter-search\">\n                  <section\n                    style={{ backgroundColor: mode.elBack, color: mode.txt }}\n                    className={`search-items shadow-${\n                      isLight ? \"light\" : \"dark\"\n                    }`}\n                  >\n                    <i style={{ color: mode.txt }} className=\"fa fa-search\"></i>\n\n                    <input\n                      onChange={this.handleSearch}\n                      type=\"text\"\n                      placeholder=\"Search for a country..\"\n                      style={{color: mode.txt}}\n                    />\n                  </section>\n                </section>\n\n                <section\n                  className={`filter-region shadow-${\n                    isLight ? \"light\" : \"dark\"\n                  }`}\n                >\n                  <Select\n                    style={{ backgroundColor: mode.elBack, color: mode.txt }}\n                    options={options}\n                    placeholder=\"Filter by region\"\n                    onChange={this.handleFilter}\n                  />\n                </section>\n              </section>\n\n              <section className=\"countries-cards container\">\n                {this.state.countries &&\n                  this.state.countries.map(country => {\n                    return <CountryItem country={country} key={country.name} />;\n                  })}\n              </section>\n            </div>\n          );\n        }}\n      </ThemeContext.Consumer>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { ThemeContext } from \"../contexts/ThemeContext\";\n\nimport axios from \"axios\";\n\nimport \"./CountryDetails.css\";\n\nexport default class CountryDetails extends Component {\n  state = {\n    country: {}\n  };\n\n  goBack = link => {\n    this.props.history.goBack();\n  };\n\n  componentDidMount() {\n    axios\n      .get(\n        `https://restcountries.eu/rest/v2/alpha/${this.props.match.params.alpha}`\n      )\n      .then(res => {\n        this.setState({\n          country: res.data\n        });\n      });\n  }\n\n  goCountry = path => {\n    axios.get(`https://restcountries.eu/rest/v2/alpha/${path}`).then(res => {\n      this.setState({\n        country: res.data\n      });\n    });\n  };\n\n  render() {\n    return (\n      <ThemeContext.Consumer>\n        {themeContext => {\n          let { isLight, light, dark } = themeContext;\n          let mode = isLight ? light : dark;\n\n          let country = this.state.country;\n\n          return (\n            <section\n              style={{ backgroundColor: mode.bg, paddingTop: \"100px\" }}\n              id=\"countryDetails\"\n            >\n              <section className=\"container\">\n                <button\n                  style={{ backgroundColor: mode.elBack, color: mode.txt }}\n                  className={`btn mode-${isLight ? \"light\" : \"dark\"}`}\n                  onClick={this.goBack}\n                >\n                  <i className=\"fa fa-arrow-left\"></i> Back\n                </button>\n\n                <section className=\"country-details flexible\">\n                  <section className=\"country-details-flag\">\n                    <img src={country.flag} alt={`${country.name}'s flag`} />\n                  </section>\n\n                  <section className=\"country-details-data\">\n                    <h2 style={{ color: mode.txt }}> {country.name} </h2>\n\n                    <section className=\"country-details-items flexible\">\n                      <ul className=\"list co-det-v1\">\n                        <li style={{ color: mode.txt }}>\n                          <span className=\"data-key\"> Native Name: </span>{\" \"}\n                          {country.nativeName}\n                        </li>\n                        <li style={{ color: mode.txt }}>\n                          <span className=\"data-key\"> Population: </span>{\" \"}\n                          {country.population}\n                        </li>\n                        <li style={{ color: mode.txt }}>\n                          <span className=\"data-key\"> Region: </span>{\" \"}\n                          {country.region}\n                        </li>\n                        <li style={{ color: mode.txt }}>\n                          <span className=\"data-key\"> Sub Region: </span>{\" \"}\n                          {country.subregion}\n                        </li>\n                        <li style={{ color: mode.txt }}>\n                          <span className=\"data-key\"> Capital: </span>{\" \"}\n                          {country.capital}\n                        </li>\n                      </ul>\n\n                      <ul className=\"list co-det-v2\">\n                        <li style={{ color: mode.txt }}>\n                          <span className=\"data-key\"> Top Level Domain: </span>{\" \"}\n                          {country.topLevelDomain}\n                        </li>\n                        <li style={{ color: mode.txt }}>\n                          {/* to return it with comma if its length is more than 1 */}\n                          <span className=\"data-key\"> Currencies: </span>{\" \"}\n                          {country.currencies &&\n                            (country.currencies.length > 1\n                              ? country.currencies.map(currency => {\n                                  return (\n                                    <span key={currency.name}>\n                                      {currency.name},\n                                    </span>\n                                  );\n                                })\n                              : country.currencies.map(currency => {\n                                  return (\n                                    <span key={currency.name}>\n                                      {currency.name}\n                                    </span>\n                                  );\n                                }))}\n                        </li>\n                        <li style={{ color: mode.txt }}>\n                          <span className=\"data-key\"> Languages: </span>{\" \"}\n                          {country.languages &&\n                            (country.languages.length > 1\n                              ? country.languages.map(language => {\n                                  return (\n                                    <span key={language.name}>\n                                      {language.name},\n                                    </span>\n                                  );\n                                })\n                              : country.languages.map(language => {\n                                  return (\n                                    <span key={language.name}>\n                                      {language.name}\n                                    </span>\n                                  );\n                                }))}\n                        </li>\n                      </ul>\n                    </section>\n                    <p className=\"borders\">\n                      <span className=\"data-key\" style={{ color: mode.txt }}>\n                        Border Countries:\n                      </span>{\" \"}\n                      {country.borders &&\n                        country.borders.map(border => {\n                          return (\n                            <button\n                              className={`btn border-btn mode-${\n                                isLight ? \"light\" : \"dark\"\n                              }`}\n                              style={{\n                                backgroundColor: mode.elBack,\n                                color: mode.txt\n                              }}\n                              key={border}\n                              onClick={() => this.goCountry(border)}\n                            >\n                              {border}\n                            </button>\n                          );\n                        })}\n                    </p>\n                  </section>\n                </section>\n              </section>\n            </section>\n          );\n        }}\n      </ThemeContext.Consumer>\n    );\n  }\n}\n","import React from \"react\";\n\n// implement routing\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport \"./index.css\";\n\nimport ThemeContextProvider from \"./contexts/ThemeContext\";\n\nimport Navbar from \"./components/Navbar\";\nimport Home from \"./components/Home\";\nimport CountryDetails from \"./components/CountryDetails\";\n\nfunction App() {\n  return (\n    <ThemeContextProvider>\n      <Navbar />\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/:alpha\" component={CountryDetails} />\n        </Switch>\n      </Router>\n    </ThemeContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}